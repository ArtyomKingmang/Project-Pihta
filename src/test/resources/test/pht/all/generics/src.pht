(progn
    (test-fn 0
        (def [[list (with-gens (new ^java.util.ArrayList) ^String)]])
        (#add list "Hi!")
        (typeof (#get list 0)))
    (test-fn 1
        (def [[list (as-gens ^java.util.List (new ^java.util.ArrayList) ^String)]])
        (#add list "Hi!")
        (typeof (#get list 0)))
    (test-fn 2
        (def [[list (new ^java.util.ArrayList<^String>)]])
        (#add list "Hi!")
        (typeof (#get list 0)))
    (test-fn 3
        (def [[list (as ^java.util.List<^String> (new ^java.util.ArrayList))]])
        (#add list "Hi!")
        (typeof (#get list 0)))
    (cls TestA [^Object]
        (ctor [] (ccall))
        (defn [[T ^Object]] foo T^ [[o T^]] o))
    (test-fn 4
        (typeof (#foo<^String> (new ^TestA) "Test!")))
    (cls [[T ^Object]] TestB [^Object]
        (ctor [] (ccall))
        (defn foo T^ [[o T^]] o))
    (test-fn 5
        (typeof (#foo (new ^TestB<^String>) "Test!")))
    (test-fn 6
        (typeof (#foo<^String> (new ^TestB) "Test!")))
    (cls [[T ^Object]] TestC [^Object]
        (ctor [] (ccall))
        (defn foo T^ [] nil))
    (cls [[T ^Object]] TestD [^Object]
        (ctor [] (ccall))
        (defn test ^TestC<T^> [] (new ^TestC)))
    (test-fn 7
        (typeof (#foo (#test (new ^TestD<^String>))))))