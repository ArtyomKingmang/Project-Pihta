(use-ctx pht
	(progn
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(def [
						[^java.util.ArrayList<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(def [
						[^java.util.List<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(def [
						[^java.util.ArrayList<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(def [
						[^java.util.List<^java.lang.Object> list (as ^java.util.List<^java.lang.Object>
								(new ^java.util.ArrayList<^java.lang.Object>))]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls [] TestA [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [[T ^java.lang.Object]] foo T^ [[o T^]]
				o))
		(cls [] Test4 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					^java.lang.String)))
		(cls [[T ^java.lang.Object]] TestB [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo T^ [[o T^]]
				o))
		(cls [] Test5 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					^java.lang.String)))
		(cls [] Test6 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					^java.lang.String)))
		(cls [[T ^java.lang.Object]] TestC [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo T^ []
				nil))
		(cls [[T ^java.lang.Object]] TestD [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] test ^TestC<T^> []
				(new ^TestC<^java.lang.Object>)))
		(cls [] Test7 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					^java.lang.String)))))(use-ctx pht
	(progn
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(def [
						[^java.util.ArrayList<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(def [
						[^java.util.List<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(def [
						[^java.util.ArrayList<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(def [
						[^java.util.List<^java.lang.Object> list (as ^java.util.List<^java.lang.Object>
								(new ^java.util.ArrayList<^java.lang.Object>))]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls [] TestA [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [[T ^java.lang.Object]] foo T^ [[o T^]]
				o))
		(cls [] Test4 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					^java.lang.String)))
		(cls [[T ^java.lang.Object]] TestB [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo T^ [[o T^]]
				o))
		(cls [] Test5 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					^java.lang.String)))
		(cls [] Test6 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					^java.lang.String)))
		(cls [[T ^java.lang.Object]] TestC [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo T^ []
				nil))
		(cls [[T ^java.lang.Object]] TestD [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] test ^TestC<T^> []
				(new ^TestC<^java.lang.Object>)))
		(cls [] Test7 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					^java.lang.String)))))