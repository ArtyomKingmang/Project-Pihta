(use-ctx pht
	(progn
		(cls Test0 [^java.lang.Object]
			(@static
				(defn test ^dynamic []
					(def [
						[^java.util.ArrayList<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls Test1 [^java.lang.Object]
			(@static
				(defn test ^dynamic []
					(def [
						[^java.util.List<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls Test2 [^java.lang.Object]
			(@static
				(defn test ^dynamic []
					(def [
						[^java.util.ArrayList<^java.lang.Object> list (new ^java.util.ArrayList<^java.lang.Object>)]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls Test3 [^java.lang.Object]
			(@static
				(defn test ^dynamic []
					(def [
						[^java.util.List<^java.lang.Object> list (as ^java.util.List<^java.lang.Object>
								(new ^java.util.ArrayList<^java.lang.Object>))]])
					(mcall
						list
						add
						"Hi!")
					^java.lang.String)))
		(cls TestA [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn foo ^java.lang.Object [[o ^java.lang.Object]]
				o))
		(cls Test4 [^java.lang.Object]
			(@static
				(defn test ^dynamic []
					^java.lang.String)))
		(cls Test5 [^java.lang.Object]
			(@static
				(defn test ^dynamic []
					^java.lang.String)))
		(cls TestB [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn foo ^java.lang.Object [[o ^java.lang.Object]]
				o))
		(cls Test6 [^java.lang.Object]
			(@static
				(defn test ^dynamic []
					^java.lang.String)))
		(cls Test7 [^java.lang.Object]
			(@static
				(defn test ^dynamic []
					^java.lang.String)))))