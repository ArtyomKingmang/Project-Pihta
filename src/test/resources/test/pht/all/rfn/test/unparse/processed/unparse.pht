(use-ctx pht pht/jvm
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(defn [] foo ^void []
					(unit))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.lang.Runnable
							^TestA
							foo)
						run))))
		(cls [] TestB [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^void []
				(unit)))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.lang.Runnable
							(new ^TestB)
							foo)
						run))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] foo ^void [[_ ^java.lang.String]]
					(unit))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.util.function.Consumer
							^TestC
							foo)
						accept
						"Foo Static!"))))
		(cls [] TestD [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^void [[_ ^java.lang.String]]
				(unit)))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.util.function.Consumer
							(new ^TestD)
							foo)
						accept
						"Foo!"))))
		(cls [] TestE [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo Static Supply!")))
		(cls [] Test4 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Supplier
								^TestE
								foo)
							get)))))
		(cls [] TestF [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^java.lang.String []
				"Foo Supply!"))
		(cls [] Test5 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Supplier
								(new ^TestF)
								foo)
							get)))))
		(cls [] TestG [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String [[o ^java.lang.String]]
					(get o))))
		(cls [] Test6 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Function
								^TestG
								foo)
							apply
							"Foo Static Function!")))))
		(cls [] TestH [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^java.lang.String [[o ^java.lang.String]]
				(get o)))
		(cls [] Test7 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Function
								(new ^TestH)
								foo)
							apply
							"Foo Function!")))))
		(cls [] TestI [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo AutoType!")))
		(cls [] TestJ [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[f ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							(get f)
							get)))))
		(cls [] Test8 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestJ
							test
							(rfn ^java.util.function.Supplier
								^TestI
								foo))))))
		(cls [] TestK [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[f ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							(get f)
							get))))
			(cls [] TestL [^java.lang.Object]
				(@static
					(defn [] foo ^java.lang.String []
						"Foo All Auto!"))
				(cls [] Test9 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestK
									test
									(rfn ^java.util.function.Supplier
										^TestL
										foo))))))))))