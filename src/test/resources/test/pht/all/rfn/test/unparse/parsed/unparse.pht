(use-ctx pht pht/jvm
	(progn
		(import
			"java"
			[
				[
					types
					[
						java.lang.Runnable
						java.util.function.Consumer
						java.util.function.Supplier
						java.util.function.Function
					]
				]
			])
		(cls
			TestA
			[
				^Object
			]
			(@static
				(defn
					foo
					^void
					[]
					(unit))))
		(test-fn
			0
			(mcall
				(rfn
					^Runnable
					^TestA
					foo)
				run))
		(cls
			TestB
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^void
				[]
				(unit)))
		(test-fn
			1
			(mcall
				(rfn
					^Runnable
					(new
						^TestB)
					foo)
				run))
		(cls
			TestC
			[
				^Object
			]
			(@static
				(defn
					foo
					^void
					[
						[
							_
							^String
						]
					]
					(unit))))
		(test-fn
			2
			(mcall
				(rfn
					^Consumer
					^TestC
					foo)
				accept
				"Foo Static!"))
		(cls
			TestD
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^void
				[
					[
						_
						^String
					]
				]
				(unit)))
		(test-fn
			3
			(mcall
				(rfn
					^Consumer
					(new
						^TestD)
					foo)
				accept
				"Foo!"))
		(cls
			TestE
			[
				^Object
			]
			(@static
				(defn
					foo
					^String
					[]
					"Foo Static Supply!")))
		(test-fn
			4
			(mcall
				(rfn
					^Supplier
					^TestE
					foo)
				get))
		(cls
			TestF
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^String
				[]
				"Foo Supply!"))
		(test-fn
			5
			(mcall
				(rfn
					^Supplier
					(new
						^TestF)
					foo)
				get))
		(cls
			TestG
			[
				^Object
			]
			(@static
				(defn
					foo
					^String
					[
						[
							o
							^String
						]
					]
					o)))
		(test-fn
			6
			(mcall
				(rfn
					^Function
					^TestG
					foo)
				apply
				"Foo Static Function!"))
		(cls
			TestH
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^String
				[
					[
						o
						^String
					]
				]
				o))
		(test-fn
			7
			(mcall
				(rfn
					^Function
					(new
						^TestH)
					foo)
				apply
				"Foo Function!"))
		(cls
			TestI
			[
				^Object
			]
			(@static
				(defn
					foo
					^String
					[]
					"Foo AutoType!")))
		(cls
			TestJ
			[
				^Object
			]
			(@static
				(defn
					test
					^String
					[
						[
							f
							^Supplier
						]
					]
					(mcall
						f
						get))))
		(test-fn
			8
			(mcall
				^TestJ
				test
				(rfn
					.
					^TestI
					foo)))
		(cls
			TestK
			[
				^Object
			]
			(@static
				(defn
					test
					^String
					[
						[
							f
							^Supplier
						]
					]
					(mcall
						f
						get)))
			(cls
				TestL
				[
					^Object
				]
				(@static
					(defn
						foo
						^String
						[]
						"Foo All Auto!"))
				(test-fn
					9
					(mcall
						.
						test
						(rfn
							.
							.
							foo)))))))