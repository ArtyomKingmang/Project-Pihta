(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(defn [] foo ^void []
					(unit))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.lang.Runnable
							^TestA
							foo)
						run))))
		(cls [] TestB [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^void []
				(unit)))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.lang.Runnable
							(new ^TestB)
							foo)
						run))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] foo ^void [[_ ^java.lang.String]]
					(unit))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.util.function.Consumer
							^TestC
							foo)
						accept
						"Foo Static!"))))
		(cls [] TestD [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^void [[_ ^java.lang.String]]
				(unit)))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.util.function.Consumer
							(new ^TestD)
							foo)
						accept
						"Foo!"))))
		(cls [] TestE [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo Static Supply!")))
		(cls [] Test4 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Supplier
								^TestE
								foo)
							get)))))
		(cls [] TestF [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^java.lang.String []
				"Foo Supply!"))
		(cls [] Test5 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Supplier
								(new ^TestF)
								foo)
							get)))))
		(cls [] TestG [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String [[o ^java.lang.String]]
					o)))
		(cls [] Test6 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Function
								^TestG
								foo)
							apply
							"Foo Static Function!")))))
		(cls [] TestH [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^java.lang.String [[o ^java.lang.String]]
				o))
		(cls [] Test7 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Function
								(new ^TestH)
								foo)
							apply
							"Foo Function!")))))
		(cls [] TestI [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo AutoType!")))
		(cls [] TestJ [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[f ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							f
							get)))))
		(cls [] Test8 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestJ
							test
							(rfn ^java.util.function.Supplier
								^TestI
								foo))))))))(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(defn [] foo ^void []
					(unit))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.lang.Runnable
							^TestA
							foo)
						run))))
		(cls [] TestB [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^void []
				(unit)))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.lang.Runnable
							(new ^TestB)
							foo)
						run))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] foo ^void [[_ ^java.lang.String]]
					(unit))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.util.function.Consumer
							^TestC
							foo)
						accept
						"Foo Static!"))))
		(cls [] TestD [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^void [[_ ^java.lang.String]]
				(unit)))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(mcall
						(rfn ^java.util.function.Consumer
							(new ^TestD)
							foo)
						accept
						"Foo!"))))
		(cls [] TestE [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo Static Supply!")))
		(cls [] Test4 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Supplier
								^TestE
								foo)
							get)))))
		(cls [] TestF [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^java.lang.String []
				"Foo Supply!"))
		(cls [] Test5 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Supplier
								(new ^TestF)
								foo)
							get)))))
		(cls [] TestG [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String [[o ^java.lang.String]]
					o)))
		(cls [] Test6 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Function
								^TestG
								foo)
							apply
							"Foo Static Function!")))))
		(cls [] TestH [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^java.lang.String [[o ^java.lang.String]]
				o))
		(cls [] Test7 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(rfn ^java.util.function.Function
								(new ^TestH)
								foo)
							apply
							"Foo Function!")))))
		(cls [] TestI [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo AutoType!")))
		(cls [] TestJ [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[f ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							f
							get)))))
		(cls [] Test8 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestJ
							test
							(rfn ^java.util.function.Supplier
								^TestI
								foo))))))))(use-ctx pht
	(progn
		(import
			(types java.lang.Runnable)
			(types java.util.function.Consumer)
			(types java.util.function.Supplier)
			(types java.util.function.Function)
		(cls
			TestA
			[
				^Object
			]
			(@static
				(defn
					foo
					^void
					[]
					(unit))))
		(test-fn
			0
			(mcall
				(rfn
					^Runnable
					^TestA
					foo)
				run))
		(cls
			TestB
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^void
				[]
				(unit)))
		(test-fn
			1
			(mcall
				(rfn
					^Runnable
					(new
						^TestB)
					foo)
				run))
		(cls
			TestC
			[
				^Object
			]
			(@static
				(defn
					foo
					^void
					[
						[
							_
							^String
						]
					]
					(unit))))
		(test-fn
			2
			(mcall
				(rfn
					^Consumer
					^TestC
					foo)
				accept
				"Foo Static!"))
		(cls
			TestD
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^void
				[
					[
						_
						^String
					]
				]
				(unit)))
		(test-fn
			3
			(mcall
				(rfn
					^Consumer
					(new
						^TestD)
					foo)
				accept
				"Foo!"))
		(cls
			TestE
			[
				^Object
			]
			(@static
				(defn
					foo
					^String
					[]
					"Foo Static Supply!")))
		(test-fn
			4
			(mcall
				(rfn
					^Supplier
					^TestE
					foo)
				get))
		(cls
			TestF
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^String
				[]
				"Foo Supply!"))
		(test-fn
			5
			(mcall
				(rfn
					^Supplier
					(new
						^TestF)
					foo)
				get))
		(cls
			TestG
			[
				^Object
			]
			(@static
				(defn
					foo
					^String
					[
						[
							o
							^String
						]
					]
					o)))
		(test-fn
			6
			(mcall
				(rfn
					^Function
					^TestG
					foo)
				apply
				"Foo Static Function!"))
		(cls
			TestH
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^String
				[
					[
						o
						^String
					]
				]
				o))
		(test-fn
			7
			(mcall
				(rfn
					^Function
					(new
						^TestH)
					foo)
				apply
				"Foo Function!"))
		(cls
			TestI
			[
				^Object
			]
			(@static
				(defn
					foo
					^String
					[]
					"Foo AutoType!")))
		(cls
			TestJ
			[
				^Object
			]
			(@static
				(defn
					test
					^String
					[
						[
							f
							^Supplier
						]
					]
					(mcall
						f
						get))))
		(test-fn
			8
			(mcall
				^TestJ
				test
				(rfn
					.
					^TestI
					foo)))))