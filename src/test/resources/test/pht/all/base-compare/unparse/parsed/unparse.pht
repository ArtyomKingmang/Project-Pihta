(use-ctx pht
	(progn
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(great
							1
							1)))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(great-or-eq
							1
							1)))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(less
							2
							2)))))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(less-or-eq
							2
							2)))))
		(cls [] Test4 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(eq
							3
							4)))))
		(cls [] Test5 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(not-eq
							3
							4)))))))(use-ctx pht
	(progn
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(great
							1
							1)))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(great-or-eq
							1
							1)))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(less
							2
							2)))))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(less-or-eq
							2
							2)))))
		(cls [] Test4 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(eq
							3
							4)))))
		(cls [] Test5 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(not-eq
							3
							4)))))))(use-ctx pht
	(progn
		(test-fn
			0
			(great
				1
				1))
		(test-fn
			1
			(great-or-eq
				1
				1))
		(test-fn
			2
			(less
				2
				2))
		(test-fn
			3
			(less-or-eq
				2
				2))
		(test-fn
			4
			(eq
				3
				4))
		(test-fn
			5
			(not-eq
				3
				4))))