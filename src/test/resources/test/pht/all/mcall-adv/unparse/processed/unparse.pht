(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(@static
				(defn [] foo ^java.lang.String [[o ^java.lang.Object]]
					"Foo static!"))
			(defn [] foo ^java.lang.String [[s ^java.lang.String]]
				"Foo!"))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestA)
							foo
							"")))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestA
							foo
							"")))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo outer!")
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestB
									foo)))))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo outer outer!")
				(cls [] TestD [^java.lang.Object]
					(cls [] Test3 [^java.lang.Object]
						(@static
							(defn [] test ^dynamic []
								(as ^dynamic
									(mcall
										^TestC
										foo))))))))))(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(@static
				(defn [] foo ^java.lang.String [[o ^java.lang.Object]]
					"Foo static!"))
			(defn [] foo ^java.lang.String [[s ^java.lang.String]]
				"Foo!"))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestA)
							foo
							"")))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestA
							foo
							"")))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo outer!")
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestB
									foo)))))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo outer outer!")
				(cls [] TestD [^java.lang.Object]
					(cls [] Test3 [^java.lang.Object]
						(@static
							(defn [] test ^dynamic []
								(as ^dynamic
									(mcall
										^TestC
										foo))))))))))(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(@static
				(defn [] foo ^java.lang.String [[o ^java.lang.Object]]
					"Foo static!"))
			(defn [] foo ^java.lang.String [[s ^java.lang.String]]
				"Foo!"))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestA)
							foo
							"")))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestA
							foo
							"")))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo outer!")
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestB
									foo)))))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo outer outer!")
				(cls [] TestD [^java.lang.Object]
					(cls [] Test3 [^java.lang.Object]
						(@static
							(defn [] test ^dynamic []
								(as ^dynamic
									(mcall
										^TestC
										foo))))))))))