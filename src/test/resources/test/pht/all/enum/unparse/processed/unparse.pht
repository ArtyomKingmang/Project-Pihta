(use-ctx pht
	(progn
		(enum [] Colors [^java.lang.Enum]
			(ector [[r ^int][g ^int][b ^int]]
				(mcall
					this
					setRed
					r)
				(mcall
					this
					setGreen
					g)
				(mcall
					this
					setBlue
					b))
			(progn-
				(progn-
					(defn [] setRed ^void [[red ^int]]
						(fset
							this
							red
							red))
					(defn [] getRed ^int []
						(fget
							this
							red))
					(defn [] setGreen ^void [[green ^int]]
						(fset
							this
							green
							green))
					(defn [] getGreen ^int []
						(fget
							this
							green))
					(defn [] setBlue ^void [[blue ^int]]
						(fset
							this
							blue
							blue))
					(defn [] getBlue ^int []
						(fget
							this
							blue))
					(def [
						[red ^int]
						[green ^int]
						[blue ^int]])))
			(efld [
				[RED 255 0 0]
				[GREEN 0 255 0]
				[BLUE 0 0 255]])
			(@static
				(defn [] <clinit> ^void []
					(progn
						(fset
							^Colors
							RED
							(new ^Colors
								"RED"
								0
								255
								0
								0))
						(fset
							^Colors
							GREEN
							(new ^Colors
								"GREEN"
								1
								0
								255
								0))
						(fset
							^Colors
							BLUE
							(new ^Colors
								"BLUE"
								2
								0
								0
								255))))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							RED)))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							GREEN)))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							BLUE)))))))(use-ctx pht
	(progn
		(enum [] Colors [^java.lang.Enum]
			(ector [[r ^int][g ^int][b ^int]]
				(mcall
					this
					setRed
					r)
				(mcall
					this
					setGreen
					g)
				(mcall
					this
					setBlue
					b))
			(progn-
				(progn-
					(defn [] setRed ^void [[red ^int]]
						(fset
							this
							red
							red))
					(defn [] getRed ^int []
						(fget
							this
							red))
					(defn [] setGreen ^void [[green ^int]]
						(fset
							this
							green
							green))
					(defn [] getGreen ^int []
						(fget
							this
							green))
					(defn [] setBlue ^void [[blue ^int]]
						(fset
							this
							blue
							blue))
					(defn [] getBlue ^int []
						(fget
							this
							blue))
					(def [
						[red ^int]
						[green ^int]
						[blue ^int]])))
			(efld [
				[RED 255 0 0]
				[GREEN 0 255 0]
				[BLUE 0 0 255]])
			(@static
				(defn [] <clinit> ^void []
					(progn
						(fset
							^Colors
							RED
							(new ^Colors
								"RED"
								0
								255
								0
								0))
						(fset
							^Colors
							GREEN
							(new ^Colors
								"GREEN"
								1
								0
								255
								0))
						(fset
							^Colors
							BLUE
							(new ^Colors
								"BLUE"
								2
								0
								0
								255))))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							RED)))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							GREEN)))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							BLUE)))))))(use-ctx pht
	(progn
		(enum [] Colors [^java.lang.Enum]
			(ector [[r ^int][g ^int][b ^int]]
				(mcall
					this
					setRed
					r)
				(mcall
					this
					setGreen
					g)
				(mcall
					this
					setBlue
					b))
			(progn-
				(progn-
					(defn [] setRed ^void [[red ^int]]
						(fset
							this
							red
							red))
					(defn [] getRed ^int []
						(fget
							this
							red))
					(defn [] setGreen ^void [[green ^int]]
						(fset
							this
							green
							green))
					(defn [] getGreen ^int []
						(fget
							this
							green))
					(defn [] setBlue ^void [[blue ^int]]
						(fset
							this
							blue
							blue))
					(defn [] getBlue ^int []
						(fget
							this
							blue))
					(def [
						[red ^int]
						[green ^int]
						[blue ^int]])))
			(efld [
				[RED 255 0 0]
				[GREEN 0 255 0]
				[BLUE 0 0 255]])
			(@static
				(defn [] <clinit> ^void []
					(progn
						(fset
							^Colors
							RED
							(new ^Colors
								"RED"
								0
								255
								0
								0))
						(fset
							^Colors
							GREEN
							(new ^Colors
								"GREEN"
								1
								0
								255
								0))
						(fset
							^Colors
							BLUE
							(new ^Colors
								"BLUE"
								2
								0
								0
								255))))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							RED)))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							GREEN)))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(fget
							^Colors
							BLUE)))))))