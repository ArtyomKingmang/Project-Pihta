(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test0 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestA
								test
								(fn ^java.lang.Runnable [][]
									(unit))))))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test1 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestB
								test
								(fn ^java.lang.Runnable [][]
									(unit))))))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(def [
								[^int i 12]
								[^int j 21]])
							(mcall
								^TestC
								test
								(fn ^java.lang.Runnable [i j][]
									(unit))))))))
		(cls [] TestD [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[o ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							o
							get)))
				(cls [] Test3 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestD
									test
									(fn ^java.util.function.Supplier [][]
										"Foo D!"))))))))
		(cls [] TestE [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[o ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							o
							get)))
				(cls [] Test4 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestE
									test
									(fn ^java.util.function.Supplier [][]
										"Foo E!"))))))))
		(cls [] TestF [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.Object [[o ^java.util.function.Supplier]]
					(mcall
						o
						get))
				(cls [] Test5 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(def [
								[^int i 12]
								[^int j 21]])
							(as ^dynamic
								(mcall
									^TestF
									test
									(fn ^java.util.function.Supplier [i j][]
										(as ^java.lang.Object
											(add
												i
												j))))))))))))(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test0 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestA
								test
								(fn ^java.lang.Runnable [][]
									(unit))))))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test1 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestB
								test
								(fn ^java.lang.Runnable [][]
									(unit))))))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(def [
								[^int i 12]
								[^int j 21]])
							(mcall
								^TestC
								test
								(fn ^java.lang.Runnable [i j][]
									(unit))))))))
		(cls [] TestD [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[o ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							o
							get)))
				(cls [] Test3 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestD
									test
									(fn ^java.util.function.Supplier [][]
										"Foo D!"))))))))
		(cls [] TestE [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[o ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							o
							get)))
				(cls [] Test4 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestE
									test
									(fn ^java.util.function.Supplier [][]
										"Foo E!"))))))))
		(cls [] TestF [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.Object [[o ^java.util.function.Supplier]]
					(mcall
						o
						get))
				(cls [] Test5 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(def [
								[^int i 12]
								[^int j 21]])
							(as ^dynamic
								(mcall
									^TestF
									test
									(fn ^java.util.function.Supplier [i j][]
										(as ^java.lang.Object
											(add
												i
												j))))))))))))(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test0 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestA
								test
								(fn ^java.lang.Runnable [][]
									(unit))))))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test1 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestB
								test
								(fn ^java.lang.Runnable [][]
									(unit))))))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(def [
								[^int i 12]
								[^int j 21]])
							(mcall
								^TestC
								test
								(fn ^java.lang.Runnable [i j][]
									(unit))))))))
		(cls [] TestD [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[o ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							o
							get)))
				(cls [] Test3 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestD
									test
									(fn ^java.util.function.Supplier [][]
										"Foo D!"))))))))
		(cls [] TestE [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[o ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							o
							get)))
				(cls [] Test4 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestE
									test
									(fn ^java.util.function.Supplier [][]
										"Foo E!"))))))))
		(cls [] TestF [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.Object [[o ^java.util.function.Supplier]]
					(mcall
						o
						get))
				(cls [] Test5 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(def [
								[^int i 12]
								[^int j 21]])
							(as ^dynamic
								(mcall
									^TestF
									test
									(fn ^java.util.function.Supplier [i j][]
										(as ^java.lang.Object
											(add
												i
												j))))))))))))