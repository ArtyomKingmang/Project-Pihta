(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test0 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestA
								test
								(progn
									(obj [] PhtLambda$83141452 [^java.lang.Object ^java.lang.Runnable]
										(defn [] run ^void []
											(unit))))))))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test1 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestB
								test
								(progn
									(obj [] PhtLambda$83141459 [^java.lang.Object ^java.lang.Runnable]
										(defn [] run ^void []
											(unit))))))))))
		(cls [] TestC [^java.lang.Object]
			(@static
				(defn [] test ^void [[o ^java.lang.Runnable]]
					(mcall
						o
						run))
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(def [
								[^int i 12]
								[^int j 21]])
							(mcall
								^TestC
								test
								(progn
									(cls [] PhtLambda$83141467 [^java.lang.Object ^java.lang.Runnable]
										(def [
											[i ^int]
											[j ^int]])
										(ctor [[i ^int][j ^int]]
											(mcall
												super
												<init>)
											(fset
												this
												i
												i)
											(fset
												this
												j
												j))
										(defn [] run ^void []
											(unit)))
									(new ^PhtLambda$83141467
										i
										j))))))))
		(cls [] TestD [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[o ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							o
							get)))
				(cls [] Test3 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestD
									test
									(progn
										(obj [] PhtLambda$83141474 [^java.lang.Object ^java.util.function.Supplier]
											(defn [] get ^java.lang.Object []
												"Foo D!"))))))))))
		(cls [] TestE [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.String [[o ^java.util.function.Supplier]]
					(as ^java.lang.String
						(mcall
							o
							get)))
				(cls [] Test4 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestE
									test
									(progn
										(obj [] PhtLambda$83141481 [^java.lang.Object ^java.util.function.Supplier]
											(defn [] get ^java.lang.Object []
												"Foo E!"))))))))))
		(cls [] TestF [^java.lang.Object]
			(@static
				(defn [] test ^java.lang.Object [[o ^java.util.function.Supplier]]
					(mcall
						o
						get))
				(cls [] Test5 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(def [
								[^int i 12]
								[^int j 21]])
							(as ^dynamic
								(mcall
									^TestF
									test
									(progn
										(cls [] PhtLambda$83141489 [^java.lang.Object ^java.util.function.Supplier]
											(def [
												[i ^int]
												[j ^int]])
											(ctor [[i ^int][j ^int]]
												(mcall
													super
													<init>)
												(fset
													this
													i
													i)
												(fset
													this
													j
													j))
											(defn [] get ^java.lang.Object []
												(as ^java.lang.Object
													(add
														i
														j))))
										(new ^PhtLambda$83141489
											i
											j)))))))))))