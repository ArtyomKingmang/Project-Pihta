(use-ctx pht
	(progn
		(cls [] App [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo!")))
		(cls [] Test [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^java.lang.String []
				"Foo Instance!"))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^App
							foo)))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^App
							foo)))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^Test)
							foo)))))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^Test)
							foo)))))))(use-ctx pht
	(progn
		(cls [] App [^java.lang.Object]
			(@static
				(defn [] foo ^java.lang.String []
					"Foo!")))
		(cls [] Test [^java.lang.Object]
			(ctor []
				(mcall
					super
					<init>))
			(defn [] foo ^java.lang.String []
				"Foo Instance!"))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^App
							foo)))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^App
							foo)))))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^Test)
							foo)))))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^Test)
							foo)))))))(use-ctx pht
	(progn
		(app
			(defn
				foo
				^String
				[]
				"Foo!"))
		(cls
			Test
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^String
				[]
				"Foo Instance!"))
		(test-fn
			0
			(mcall
				^App
				foo))
		(test-fn
			1
			(mcall
				^App
				foo))
		(test-fn
			2
			(mcall
				(new
					^Test)
				foo))
		(test-fn
			3
			(mcall
				(new
					^Test)
				foo))))