(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(progn-
					(@static
						(defn [] setI ^void [[i ^int]]
							(fset
								^TestA
								i
								i))
						(defn [] getI ^int []
							(fget
								^TestA
								i))
						(def [
							[i ^int]])))
				(defn [] test ^int []
					(mcall
						^TestA
						setI
						776)
					(mcall
						^TestA
						getI))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestA
							test)))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(progn-
					(@static
						(defn [] setI ^void [[i ^int]]
							(fset
								^TestB
								i
								i))
						(defn [] getI ^int []
							(fget
								^TestB
								i))
						(def [
							[i ^int]])))
				(defn [] test ^int []
					(mcall
						^TestB
						setI
						777)
					(mcall
						^TestB
						getI))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestB
							test)))))
		(cls [] TestC [^java.lang.Object]
			(progn-
				(progn-
					(defn [] setI ^void [[i ^int]]
						(fset
							this
							i
							i))
					(defn [] getI ^int []
						(fget
							this
							i))
					(def [
						[i ^int]])))
			(ctor []
				(mcall
					super
					<init>))
			(defn [] test ^int []
				(mcall
					this
					setI
					240422)
				(mcall
					this
					getI)))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestC)
							test)))))
		(cls [] TestD [^java.lang.Object]
			(progn-
				(progn-
					(defn [] setI ^void [[i ^int]]
						(fset
							this
							i
							i))
					(defn [] getI ^int []
						(fget
							this
							i))
					(def [
						[i ^int]])))
			(ctor []
				(mcall
					super
					<init>))
			(defn [] test ^int []
				(mcall
					this
					setI
					404)
				(mcall
					(get this)
					getI)))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestD)
							test)))))))(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(progn-
					(@static
						(defn [] setI ^void [[i ^int]]
							(fset
								^TestA
								i
								i))
						(defn [] getI ^int []
							(fget
								^TestA
								i))
						(def [
							[i ^int]])))
				(defn [] test ^int []
					(mcall
						^TestA
						setI
						776)
					(mcall
						^TestA
						getI))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestA
							test)))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(progn-
					(@static
						(defn [] setI ^void [[i ^int]]
							(fset
								^TestB
								i
								i))
						(defn [] getI ^int []
							(fget
								^TestB
								i))
						(def [
							[i ^int]])))
				(defn [] test ^int []
					(mcall
						^TestB
						setI
						777)
					(mcall
						^TestB
						getI))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestB
							test)))))
		(cls [] TestC [^java.lang.Object]
			(progn-
				(progn-
					(defn [] setI ^void [[i ^int]]
						(fset
							this
							i
							i))
					(defn [] getI ^int []
						(fget
							this
							i))
					(def [
						[i ^int]])))
			(ctor []
				(mcall
					super
					<init>))
			(defn [] test ^int []
				(mcall
					this
					setI
					240422)
				(mcall
					this
					getI)))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestC)
							test)))))
		(cls [] TestD [^java.lang.Object]
			(progn-
				(progn-
					(defn [] setI ^void [[i ^int]]
						(fset
							this
							i
							i))
					(defn [] getI ^int []
						(fget
							this
							i))
					(def [
						[i ^int]])))
			(ctor []
				(mcall
					super
					<init>))
			(defn [] test ^int []
				(mcall
					this
					setI
					404)
				(mcall
					(get this)
					getI)))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestD)
							test)))))))(use-ctx pht
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(progn-
					(@static
						(defn [] setI ^void [[i ^int]]
							(fset
								^TestA
								i
								i))
						(defn [] getI ^int []
							(fget
								^TestA
								i))
						(def [
							[i ^int]])))
				(defn [] test ^int []
					(mcall
						^TestA
						setI
						776)
					(mcall
						^TestA
						getI))))
		(cls [] Test0 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestA
							test)))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(progn-
					(@static
						(defn [] setI ^void [[i ^int]]
							(fset
								^TestB
								i
								i))
						(defn [] getI ^int []
							(fget
								^TestB
								i))
						(def [
							[i ^int]])))
				(defn [] test ^int []
					(mcall
						^TestB
						setI
						777)
					(mcall
						^TestB
						getI))))
		(cls [] Test1 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							^TestB
							test)))))
		(cls [] TestC [^java.lang.Object]
			(progn-
				(progn-
					(defn [] setI ^void [[i ^int]]
						(fset
							this
							i
							i))
					(defn [] getI ^int []
						(fget
							this
							i))
					(def [
						[i ^int]])))
			(ctor []
				(mcall
					super
					<init>))
			(defn [] test ^int []
				(mcall
					this
					setI
					240422)
				(mcall
					this
					getI)))
		(cls [] Test2 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestC)
							test)))))
		(cls [] TestD [^java.lang.Object]
			(progn-
				(progn-
					(defn [] setI ^void [[i ^int]]
						(fset
							this
							i
							i))
					(defn [] getI ^int []
						(fget
							this
							i))
					(def [
						[i ^int]])))
			(ctor []
				(mcall
					super
					<init>))
			(defn [] test ^int []
				(mcall
					this
					setI
					404)
				(mcall
					(get this)
					getI)))
		(cls [] Test3 [^java.lang.Object]
			(@static
				(defn [] test ^dynamic []
					(as ^dynamic
						(mcall
							(new ^TestD)
							test)))))))