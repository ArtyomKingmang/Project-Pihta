(load-ctx
	(use-ctx pht pht/jvm
		(progn
			(import "java" [
				[types [java.util.function.Supplier]]
])
			(cls [] Caller [^java.lang.Object]
				(@static
					(defn [] call ^java.lang.Object [[ref ^java.util.function.Supplier<^java.lang.Object>]]
						(mcall
							(get ref)
							get))))
			(cls [] TestA [^java.lang.Object]
				(@static
					(defn [] foo ^java.lang.String []
						"Auto Foo!")
					(defn [] call ^java.lang.Object []
						(mcall
							^Caller
							call
							(rfn ^java.util.function.Supplier<^java.lang.Object>
								^TestA
								foo)))
					(defn [] call-as ^java.lang.Object []
						(mcall
							(rfn ^java.util.function.Supplier<^java.lang.Object>
								^TestA
								foo)
							get))))
			(cls [] TestB [^java.lang.Object]
				(ctor []
					(mcall
						super
						<init>))
				(defn [] foo ^java.lang.String []
					"Auto Instanced Foo!")
				(defn [] call ^java.lang.Object []
					(mcall
						^Caller
						call
						(rfn ^java.util.function.Supplier<^java.lang.Object>
							(get this)
							foo)))
				(defn [] call-as ^java.lang.Object []
					(mcall
						(rfn ^java.util.function.Supplier<^java.lang.Object>
							(get this)
							foo)
						get)))
			(@test
				(cls [] Test0 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestA
									call))))))
			(@test
				(cls [] Test1 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestA
									call-as))))))
			(@test
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									(new ^TestB)
									call))))))
			(@test
				(cls [] Test3 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									(new ^TestB)
									call-as)))))))))