(load-ctx
	(use-ctx pht pht/jvm
		(progn
			(cls
				[
					[
						A
						^Object
					]
					[
						B
						^Object
					]
				]
				Test
				[
					^Object
				]
				(ctor
					[]
					(ccall))
				(defn
					foo
					A^
					[]
					nil)
				(defn
					bar
					B^
					[]
					nil)
				(@static
					(defn
						make
						^Object
						[]
						(new
							^Test))))
			(test-fn
				0
				(def-set
					o
					(macro as-gens
						^Test
						(mcall
							^Test
							make)
						[
							^Class
							^String
						]))
				(type-of
					(mcall
						o
						foo)))
			(test-fn
				1
				(def-set
					o
					(macro as-gens
						^Test
						(mcall
							^Test
							make)
						[
							^Class
							^String
						]))
				(type-of
					(mcall
						o
						bar))))))