(load-ctx
	(use-ctx pht pht/jvm
		(progn
			(cls [] TestA [^java.lang.Object]
				(@static
					(defn [] foo ^int [[i ^int]]
						(add
							(get i)
							5))))
			(@test
				(cls [] Test0 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestA
									foo
									5))))))
			(cls [] TestB [^java.lang.Object]
				(ctor []
					(mcall
						super
						<init>))
				(defn [] foo ^int [[i ^int]]
					(add
						(get i)
						15)))
			(@test
				(cls [] Test1 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									(new ^TestB)
									foo
									10))))))
			(cls [] TestC [^java.lang.Object]
				(@static
					(defn [] foo ^int [[i ^int]]
						(sub
							(get i)
							5))
					(defn [] call ^int [[i ^int]]
						(mcall
							^TestC
							foo
							(get i)))))
			(@test
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestC
									call
									35))))))
			(cls [] TestD [^java.lang.Object]
				(ctor []
					(mcall
						super
						<init>))
				(defn [] foo ^int [[i ^int]]
					(sub
						(get i)
						15))
				(defn [] call ^int [[i ^int]]
					(mcall
						(get this)
						foo
						(get i))))
			(@test
				(cls [] Test3 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									(new ^TestD)
									call
									65)))))))))