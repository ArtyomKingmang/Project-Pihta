(use-ctx pht pht/jvm
	(progn
		(cls
			TestA
			[
				^Object
			]
			(@static
				(defn
					foo
					^int
					[
						[
							i
							^int
						]
					]
					(add
						i
						5))))
		(test-fn
			0
			(mcall
				^TestA
				foo
				5))
		(cls
			TestB
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^int
				[
					[
						i
						^int
					]
				]
				(add
					i
					15)))
		(test-fn
			1
			(mcall
				(new
					^TestB)
				foo
				10))
		(cls
			TestC
			[
				^Object
			]
			(@static
				(defn
					foo
					^int
					[
						[
							i
							^int
						]
					]
					(sub
						i
						5))
				(defn
					call
					^int
					[
						[
							i
							^int
						]
					]
					(mcall
						.
						foo
						i))))
		(test-fn
			2
			(mcall
				^TestC
				call
				35))
		(cls
			TestD
			[
				^Object
			]
			(ctor
				[]
				(ccall))
			(defn
				foo
				^int
				[
					[
						i
						^int
					]
				]
				(sub
					i
					15))
			(defn
				call
				^int
				[
					[
						i
						^int
					]
				]
				(mcall
					.
					foo
					i)))
		(test-fn
			3
			(mcall
				(new
					^TestD)
				call
				65))))