(load-ctx
	(use-ctx pht pht/jvm
		(progn
			(cls [] TestA [^java.lang.Object]
				(@static
					(defn [] foo ^void [[o ^java.lang.Object]]
						(unit))))
			(@test
				(cls [] Test0 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestA
								foo
								"Foo!")))))
			(cls [] TestB [^java.lang.Object]
				(ctor []
					(mcall
						super
						<init>))
				(defn [] foo ^void [[o ^java.lang.Object]]
					(unit)))
			(@test
				(cls [] Test1 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								(new ^TestB)
								foo
								"Foo!")))))
			(cls [] TestC [^java.lang.Object]
				(@static
					(defn [] foo ^void [[o ^java.lang.Object]]
						(unit))
					(defn [] call ^void [[o ^java.lang.Object]]
						(mcall
							^TestC
							foo
							(get o)))))
			(@test
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestC
								call
								"Foo!")))))
			(cls [] TestD [^java.lang.Object]
				(ctor []
					(mcall
						super
						<init>))
				(defn [] foo ^void [[o ^java.lang.Object]]
					(unit))
				(defn [] call ^void [[o ^java.lang.Object]]
					(mcall
						(get this)
						foo
						(get o))))
			(@test
				(cls [] Test3 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								(new ^TestD)
								call
								"Foo!"))))))))