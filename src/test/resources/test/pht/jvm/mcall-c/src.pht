(progn
    (cls TestA [^Object] (@static
        (defn foo ^void [[o ^Object]] (unit))))
    (test-fn 0 (#foo ^TestA "Foo!"))

    (cls TestB [^Object]
        (ctor [] (ccall))
        (defn foo ^void [[o ^Object]] (unit)))
    (test-fn 1 (#foo (new ^TestB) "Foo!"))

    (cls TestC [^Object] (@static
        (defn foo ^void [[o ^Object]] (unit))
        (defn call ^void [[o ^Object]] (#foo . o))))
    (test-fn 2 (#call ^TestC "Foo!"))

    (cls TestD [^Object]
        (ctor [] (ccall))
        (defn foo ^void [[o ^Object]] (unit))
        (defn call ^void [[o ^Object]] (#foo . o)))
    (test-fn 3 (#call (new ^TestD) "Foo!")))