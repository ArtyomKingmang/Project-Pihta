(use-ctx pht pht/jvm
	(progn
		(cls [] TestA [^java.lang.Object]
			(@static
				(progn-
					(@static
						(defn [] setI ^void [[i ^int]]
							(fset
								^TestA
								i
								(get i)))
						(defn [] getI ^int []
							(fget
								^TestA
								i))
						(def [
							[i ^int]]))))
			(cls [] Test0 [^java.lang.Object]
				(@static
					(defn [] test ^dynamic []
						(mcall
							^TestA
							setI
							333)
						(as ^dynamic
							(mcall
								^TestA
								getI))))))
		(cls [] TestB [^java.lang.Object]
			(@static
				(defn [] setFoo ^java.lang.String [[a ^java.lang.String][b ^java.lang.String]]
					(mcall
						(get a)
						add
						(body
							(def [
								[^[java.lang.Object pht$tmp$13409 (new-array ^java.lang.Object 3)]])
							(aset
								(get pht$tmp$13409)
								0
								" ")
							(aset
								(get pht$tmp$13409)
								1
								(get b))
							(aset
								(get pht$tmp$13409)
								2
								"!")
							(get pht$tmp$13409))))
				(defn [] getFoo ^java.lang.String [[c ^java.lang.String][d ^java.lang.String]]
					(mcall
						"Боже, "
						add
						(body
							(def [
								[^[java.lang.Object pht$tmp$13411 (new-array ^java.lang.Object 4)]])
							(aset
								(get pht$tmp$13411)
								0
								(get c))
							(aset
								(get pht$tmp$13411)
								1
								" ")
							(aset
								(get pht$tmp$13411)
								2
								(get d))
							(aset
								(get pht$tmp$13411)
								3
								"!")
							(get pht$tmp$13411))))
				(cls [] Test1 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(mcall
								^TestB
								setFoo
								"Слава"
								"России"))))
				(cls [] Test2 [^java.lang.Object]
					(@static
						(defn [] test ^dynamic []
							(as ^dynamic
								(mcall
									^TestB
									getFoo
									"Путина"
									"Храни")))))))))