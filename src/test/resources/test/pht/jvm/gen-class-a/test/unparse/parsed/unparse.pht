(load-ctx
	(use-ctx pht pht/jvm
		(progn
			(@open
				(cls
					[
						[
							T
							^Object
						]
					]
					TestA
					[
						^Object
					]
					(ctor
						[]
						(ccall))
					(defn
						foo
						T^
						[]
						nil)))
			(test-fn
				0
				(type-of
					(mcall
						(new
							^TestA)
						foo)))
			(test-fn
				1
				(type-of
					(mcall
						(new
							^TestA<^String>)
						foo)))
			(@open
				(cls
					[
						[
							T
							^Object
						]
					]
					TestB
					[
						^TestA<T^>
					]
					(ctor
						[]
						(ccall))))
			(@open
				(cls
					[
						[
							T
							^Object
						]
					]
					TestC
					[
						^TestB<T^>
					]
					(ctor
						[]
						(ccall))))
			(test-fn
				2
				(type-of
					(mcall
						(new
							^TestB<^Class>)
						foo)))
			(test-fn
				3
				(type-of
					(mcall
						(new
							^TestC<^Class>)
						foo)))
			(cls
				TestD
				[
					^TestC<^Class>
				]
				(ctor
					[]
					(ccall)))
			(test-fn
				4
				(type-of
					(mcall
						(new
							^TestD)
						foo))))))