package ru.DmN.pht.std.compiler.java

import ru.DmN.pht.compiler.java.compilers.NCIs
import ru.DmN.pht.std.Pihta
import ru.DmN.pht.std.compiler.java.compilers.*
import ru.DmN.pht.std.node.NodeTypes.*
import ru.DmN.siberia.compiler.utils.ModuleCompilers
import ru.DmN.siberia.compilers.NCDefault
import ru.DmN.siberia.processor.utils.Platform

class PihtaJava(module: Pihta) : ModuleCompilers(module, Platform.JAVA) {
    override fun onInitialize() {
        // a
        add(ADD_,         NCMath)
        add(AGET_,        NCAGet)
        add(ALIAS_TYPE_,  NCSkip)
        add(AND_,         NCMath)
        add(ARRAY_SIZE_,  NCArraySize)
        add(AS_,          NCAs)
        add(ASET_,        NCASet)
        // b
        add(BODY_,        NCBody)
        add(BREAK_,       NCBreak)
        // c
        add(CATCH_,       NCCatch)
        add(CLS_,         NCClass)
        add(CONTINUE_,    NCContinue)
        add(CTOR_,        NCDefn)
        add(CYCLE_,       NCCycle)
        // d
        add(DEC_PRE_,     NCIncDec)
        add(DEC_POST_,    NCIncDec)
        add(DEF_,         NCDef)
        add(DEFN_,        NCDefn)
        add(DIV_,         NCMath)
        // e
        add(EFLD_,        NCEField)
        add(EFN_,         NCDefn)
        add(ENUM_,        NCClass)
        add(EQ_,          NCCompare)
        // f
        add(FGET_,        NCFGet)
        add(FLD_,         NCField)
        add(FN_,          NCFn)
        add(FSET_,        NCFSet)
        // g
        add(GET_,         NCGetA)
        add(GET_OR_NAME,  NCGetB)
        add(GREAT_,       NCCompare)
        add(GREAT_OR_EQ_, NCCompare)
        // i
        add(IF_,          NCIf)
        add(INC_PRE_,     NCIncDec)
        add(INC_POST_,    NCIncDec)
        add(IS_,          NCIs)
        add(ITF_,         NCClass)
        // l
        add(LESS_,        NCCompare)
        add(LESS_OR_EQ_,  NCCompare)
        // m
        add(MCALL_,       NCMCall)
        add(MUL_,         NCMath)
        // n
        add(NAMED_BLOCK_, NCNamedBlock)
        add(NEG_,         NCMath)
        add(NEW_,         NCNew)
        add(NEW_ARRAY_,   NCNewArray)
        add(NOT_,         NCCompare)
        add(NOT_EQ_,      NCCompare)
        add(NS_,          NCDefault)
        // o
        add(OBJ_,         NCClass)
        add(OR_,          NCMath)
        // r
        add(REM_,         NCMath)
        add(RET_,         NCRet)
        // s
        add(SET_,         NCSet)
        add(SHIFT_LEFT_,  NCMath)
        add(SHIFT_RIGHT_, NCMath)
        add(SUB_,         NCMath)
        // t
        add(THROW_,       NCThrow)
        // u
        add(UNIT,         NCUnit)
        // v
        add(VALUE,        NCValue)
        // x
        add(XOR_,         NCMath)

        // @
        add(ANN_ABSTRACT_, NCDefault)
        add(ANN_FINAL_,    NCDefault)
        add(ANN_OPEN_,     NCDefault)
        add(ANN_STATIC_,   NCDefault)
        add(ANN_VARARGS_,  NCDefault)
    }
}