(progn
    (import java
        (types java.lang.Enum)
        (types java.lang.Iterable)
        (types java.lang.StringBuilder)
        (types java.lang.System)
        (types java.util.ArrayList)
        (types java.util.Iterator)
        (types java.util.List))

    (ns ru.DmN.pht
        (cls ArrayExtends [^Object]
            (defmacro toList [type]
                (efn (array-type (macro-arg type)) toList ^List [] (progn
                    (def [[list (new ^ArrayList)]])
                    (for [e this]
                        (#add list e))
                    list)))

            (defmacro contentToString [type]
                (efn (array-type (macro-arg type)) contentToString ^String [] (progn
                    (def [[str (new ^StringBuilder)]])
                    (#append str '[')
                    (def [[i (- (array-size this) 1)]])
                    (cycle (> i 0)
                        (#append str (aget this i))
                        (#append str ' ')
                        (set i (- i 1)))
                    (if (> (array-size this) 0)
                        (#append str (aget this 0)))
                    (#append str ']')
                    (#toString str))))

            (defmacro universal-array-extends [types]
                (macro-unroll [[type types]]
                    (toList (macro-arg type))
                    (contentToString (macro-arg type))))

            (universal-array-extends [^boolean ^byte ^short ^char ^int ^long ^float ^double ^Any]))

        (cls StringExtends [^Object]
            (@varargs (efn ^String add ^String [[arr (array-type ^Any)]] (progn
                (def [[str (new ^StringBuilder this)]])
                (for [e arr]
                    (#append str (#toString ^java.util.Objects e)))
                (#toString str))))))

    (ns ru.DmN.pht.io
        (cls StdOut [^Object] (@static (@inline
            (defmacro print-as-int [types]
                (macro-unroll [[type types]]
                    (defn print ^void [[msg (macro-arg type)]]
                        (#print (get ^System/out) (as ^int msg)))
                    (defn println ^void [[msg (macro-arg type)]]
                        (#println (get ^System/out) (as ^int msg)))))
            (defmacro print- [types]
                (macro-unroll [[type types]]
                    (defn print ^void [[msg (macro-arg type)]]
                        (#print (get ^System/out) msg))
                    (defn println ^void [[msg (macro-arg type)]]
                        (#println (get ^System/out) msg))))
            (defn println ^void []
                (#println (get ^System/out)))
            (print-         [^boolean ^char ^int ^long ^float ^double ^Any])
            (print-as-int   [^byte ^short])))))

    (ns ru.DmN.pht.math
        (cls MathExtends [^Object]
            (efn ^float and ^float [[other ^float]]
                (#intBitsToFloat ^java.lang.Float
                    (and
                        (#floatToRawIntBits ^java.lang.Float this)
                        (#floatToRawIntBits ^java.lang.Float other))))
            (efn ^double and ^double [[other ^double]]
                (#longBitsToDouble ^java.lang.Double
                    (and
                        (#doubleToLongBits ^java.lang.Double this)
                        (#doubleToLongBits ^java.lang.Double other))))

            (efn ^float or ^float [[other ^float]]
                (#intBitsToFloat ^java.lang.Float
                    (or
                        (#floatToRawIntBits ^java.lang.Float this)
                        (#floatToRawIntBits ^java.lang.Float other))))
            (efn ^double or ^double [[other ^double]]
                (#longBitsToDouble ^java.lang.Double
                    (or
                        (#doubleToLongBits ^java.lang.Double this)
                        (#doubleToLongBits ^java.lang.Double other))))

            (efn ^long xor ^long [[other ^long]]
                (or
                    (and (as ^long (xor (as ^int (and this 4294967295l)) (as ^int (and other 4294967295l)))) 4294967295l)
                    (<< (as ^long (xor (as ^int (>> this 32)) (as ^int (>> other 32)))) 32)))
            (efn ^float xor ^float [[other ^float]]
                (#intBitsToFloat ^java.lang.Float
                    (xor
                        (#floatToRawIntBits ^java.lang.Float this)
                        (#floatToRawIntBits ^java.lang.Float other))))
            (efn ^double xor ^double [[other ^double]]
                (#longBitsToDouble ^java.lang.Double
                    (xor
                        (#doubleToLongBits ^java.lang.Double this)
                        (#doubleToLongBits ^java.lang.Double other))))

            (efn ^float shift-left ^float [[offset ^int]]
                (#intBitsToFloat ^java.lang.Float
                    (shift-left
                        (#floatToRawIntBits ^java.lang.Float this)
                        offset)))
            (efn ^double shift-left ^double [[offset ^int]]
                (#longBitsToDouble ^java.lang.Double
                    (shift-left
                        (#doubleToLongBits ^java.lang.Double this)
                        offset)))

            (efn ^float shift-right ^float [[offset ^int]]
                (#intBitsToFloat ^java.lang.Float
                    (shift-right
                        (#floatToRawIntBits ^java.lang.Float this)
                        offset)))
            (efn ^double shift-right ^double [[offset ^int]]
                (#longBitsToDouble ^java.lang.Double
                    (shift-right
                        (#doubleToLongBits ^java.lang.Double this)
                        offset)))))

    (export
        (import java
            (types java.lang.Class)
            (types java.lang.Object)
            (types java.lang.String))
        (alias-type [[Object Any]])
        (import pht
            (extensions ru.DmN.pht.ArrayExtends)
            (extensions ru.DmN.pht.StringExtends)
            (extensions ru.DmN.pht.math.MathExtends))))