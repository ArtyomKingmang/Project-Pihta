(progn
    (import "java" [
        [types [
            java.lang.Enum
            java.lang.Iterable
            java.lang.StringBuilder
            java.lang.System
            java.util.ArrayList
            java.util.Iterator
            java.util.List]]])

    (ns ru.DmN.pht
        (cls ArrayExtends [^Object]
            (def-macro toList [type]
                (efn (arr-type (macro-arg type)) toList ^List [] (progn
                    (def [[list (new ^ArrayList)]])
                    (for [e this]
                        (#add list e))
                    list)))
            (def-macro contentToString [type]
                (efn (arr-type (macro-arg type)) contentToString ^String [] (progn
                    (def [[str (new ^StringBuilder)]])
                    (#append str '[')
                    (def [[i (- (arr-size this) 1)]])
                    (cycle (> i 0)
                        (#append str (aget this i))
                        (#append str ' ')
                        (set i (- i 1)))
                    (if (> (arr-size this) 0)
                        (#append str (aget this 0)))
                    (#append str ']')
                    (#toString str))))
            (def-macro universal-array-extends [types]
                (macro-unroll [[type types]]
                    (toList (macro-arg type))
                    (contentToString (macro-arg type))))
            (universal-array-extends [^boolean ^byte ^short ^char ^int ^long ^float ^double ^Any]))

        (cls StringExtends [^Object]
            (@varargs
            (efn ^String add ^String [[arr (arr-type ^Any)]] (progn
                (def [[str (new ^StringBuilder this)]])
                (for [e arr]
                    (#append str (#toString ^java.util.Objects e)))
                (#toString str))))))

    (ns ru.DmN.pht.io
        (cls StdOut [^Object] (@static
            (def-macro defn-print-as-int [types]
                (macro-unroll [[type types]]
                    (@inline
                        (defn print ^void [[msg (macro-arg type)]]
                            (#print ^System/out (as ^int msg)))
                        (defn println ^void [[msg (macro-arg type)]]
                            (#println ^System/out (as ^int msg)))
                        (@varargs
                            (defn print ^void [[msg (arr-type (macro-arg type))]]
                                (#print ^System/out (#contentToString msg)))
                            (defn println ^void [[msg (arr-type (macro-arg type))]]
                                (#println ^System/out (#contentToString msg)))))))
            (def-macro defn-print [types]
                (macro-unroll [[type types]]
                    (@inline
                        (defn print ^void [[msg (macro-arg type)]]
                            (#print ^System/out msg))
                        (defn println ^void [[msg (macro-arg type)]]
                            (#println ^System/out msg))
                        (@varargs
                            (defn print ^void [[msg (arr-type (macro-arg type))]]
                                (#print ^System/out (#contentToString msg)))
                            (defn println ^void [[msg (arr-type (macro-arg type))]]
                                (#println ^System/out (#contentToString msg)))))))
            (defn println ^void []
                (#println ^System/out))
            (defn-print         [^boolean ^char ^int ^long ^float ^double ^Any])
            (defn-print-as-int  [^byte ^short]))))

    (ns ru.DmN.pht.math
        (cls MathExtends [^Object]
            (efn ^float and ^float [[other ^float]]
                (#intBitsToFloat ^java.lang.Float
                    (and
                        (#floatToRawIntBits ^java.lang.Float this)
                        (#floatToRawIntBits ^java.lang.Float other))))
            (efn ^double and ^double [[other ^double]]
                (#longBitsToDouble ^java.lang.Double
                    (and
                        (#doubleToLongBits ^java.lang.Double this)
                        (#doubleToLongBits ^java.lang.Double other))))

            (efn ^float or ^float [[other ^float]]
                (#intBitsToFloat ^java.lang.Float
                    (or
                        (#floatToRawIntBits ^java.lang.Float this)
                        (#floatToRawIntBits ^java.lang.Float other))))
            (efn ^double or ^double [[other ^double]]
                (#longBitsToDouble ^java.lang.Double
                    (or
                        (#doubleToLongBits ^java.lang.Double this)
                        (#doubleToLongBits ^java.lang.Double other))))

            (efn ^long xor ^long [[other ^long]]
                (or
                    (and (as ^long (xor (as ^int (and this 4294967295l)) (as ^int (and other 4294967295l)))) 4294967295l)
                    (<< (as ^long (xor (as ^int (>> this 32)) (as ^int (>> other 32)))) 32)))
            (efn ^float xor ^float [[other ^float]]
                (#intBitsToFloat ^java.lang.Float
                    (xor
                        (#floatToRawIntBits ^java.lang.Float this)
                        (#floatToRawIntBits ^java.lang.Float other))))
            (efn ^double xor ^double [[other ^double]]
                (#longBitsToDouble ^java.lang.Double
                    (xor
                        (#doubleToLongBits ^java.lang.Double this)
                        (#doubleToLongBits ^java.lang.Double other))))

            (efn ^float shift-left ^float [[offset ^int]]
                (#intBitsToFloat ^java.lang.Float
                    (shift-left
                        (#floatToRawIntBits ^java.lang.Float this)
                        offset)))
            (efn ^double shift-left ^double [[offset ^int]]
                (#longBitsToDouble ^java.lang.Double
                    (shift-left
                        (#doubleToLongBits ^java.lang.Double this)
                        offset)))

            (efn ^float shift-right ^float [[offset ^int]]
                (#intBitsToFloat ^java.lang.Float
                    (shift-right
                        (#floatToRawIntBits ^java.lang.Float this)
                        offset)))
            (efn ^double shift-right ^double [[offset ^int]]
                (#longBitsToDouble ^java.lang.Double
                    (shift-right
                        (#doubleToLongBits ^java.lang.Double this)
                        offset)))))

    (export
        (comment "Импорт базовых типов")
        (import "java" [
            [types [
                java.lang.Class
                java.lang.Object
                java.lang.String
                java.lang.Integer
                java.lang.NullPointerException]]])
        (import "kotlin" [
            [types [
                kotlin.Unit]]])
        (alias-type [[Object Any]])
        (import "pht/jvm" [
            [extensions [
                ru.DmN.pht.ArrayExtends
                ru.DmN.pht.StringExtends
                ru.DmN.pht.math.MathExtends]]])

        (comment "Определение макро-инструкций")
        (def-macro null-check [o]
            (if (= (macro-arg o) nil)
                (throw (new ^NullPointerException))
                (as (not-null-type (type-of (macro-arg o))) (as (clr-null-type (type-of (macro-arg o))) (macro-arg o)))))))