(progn
    (cls TestA [^Object]
        (ctor [] (ccall))
        (defn fooA ^void [] (println "FooA!")))
    (cls TestB [^Object]
        (ctor [] (ccall))
        (defn fooB ^void [] (println "FooB!")))
    (app
        (defn testA ^void [[a ^TestA]]
            (println a))
        (defn testB ^void [[b ^TestB]]
            (println b))
        (app-fn
            (def [
                [o (new ^TestA)]
                [o (new ^TestB)]])
            (#testA . o)
            (#testB . o))))